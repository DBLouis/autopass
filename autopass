#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'
require 'shellwords'
require 'digest/sha2'
require 'ostruct'

begin
  require 'rotp'
  HAS_OTP = true
rescue LoadError
  HAS_OTP = false
end

config_dir = ENV['XDG_CONFIG_HOME'] || "#{ENV['HOME']}/.config"
config_file = File.join(config_dir, 'autopass', 'config.yml')
unless File.exist?(config_file)
  FileUtils.mkdir_p(File.dirname(config_file))
  File.write config_file, <<EOF
---
# you can insert any environment variable inside %{} for it to be replaced by
# the value of that variable. If it needs to be at the beginning of the string
# you have to escape it (e.g. `foo: %{BAR}` will raise an error, `foo: '%{BAR}'`
# will work though)

cache_file: /tmp/autopass-%{USER}.cache
# cache_key: YOUR_KEY_ID
# key_bindings:
#   autotype_tan: Alt+t
#   copy_username: Alt+u
#   copy_password: Alt+p
EOF
  puts "Copied example config to #{config_file}"
  puts 'Please edit and set the gpg key to use for decrypting the cache'
  exit
end

SYM_ENV = Hash[ENV.map { |var, value| [var.to_sym, value] }]

def expand_config(item)
  case item
  when Hash
    ostruct = OpenStruct.new
    item.each { |key, value| ostruct[key] = expand_config(value) }
    ostruct
  when Array then item.map(&method(:expand_config))
  when String
    if item =~ /%\{.+\}/
      item % SYM_ENV
    else
      item
    end
  else item
  end
end

class OpenStruct
  def merge!(other)
    other.each_pair do |key, value|
      own_value = self[key]
      self[key] = if value.is_a?(OpenStruct) && own_value.is_a?(OpenStruct)
                    own_value.merge!(value)
                  else
                    value
                  end
    end
    self
  end

  def merge(other)
    Marshal.load(Marshal.dump(self)).merge!(other)
  end

  def reverse_merge!(other)
    other.each_pair do |key, value|
      own_value = self[key]
      self[key] = if value.is_a?(OpenStruct) && own_value.is_a?(OpenStruct)
                    own_value.reverse_merge!(value)
                  elsif own_value.nil?
                    value
                  else
                    own_value
                  end
    end
    self
  end

  def reverse_merge(other)
    Marshal.load(Marshal.dump(self)).reverse_merge!(other)
  end
end

DEFAULT_CONFIG = expand_config(
  cache_file: '/tmp/getpw_cache.gpg',
  password_store: '%{HOME}/.password-store',
  key_bindings: {
    copy_username: 'Alt+u',
    copy_password: 'Alt+p',
    autotype_tan: 'Alt+t'
  },
  alt_delay: 0.5
)

CONFIG = expand_config(YAML.load_file(config_file))
CONFIG.reverse_merge!(DEFAULT_CONFIG)

if ARGV[0] == 'clear-cache'
  File.delete(CONFIG.cache_file)
  exit
end

unless Dir.exist?(CONFIG.password_store)
  abort('It seems that you havent set up a password store yet. Do so by running `pass init <YOUR_KEY_ID>`')
end

class Entry
  attr_reader :name, :attributes

  def initialize(name, attributes = OpenStruct.new)
    @name = name
    @attributes = attributes
  end

  def autotype!(index = 0)
    return if autotype_values(index).empty?
    sleep CONFIG.alt_delay if index > 0
    focus_window!
    perform_autotype(autotype_values(index))
  end

  def autotype_tan
    tan = nil
    unless attributes.tan
      `notify-send -u critical -t 5000 'This entry has no tan attribute'`
      exit
    end

    tans = attributes.tan.lines
    loop do
      tan_number = ask_tan_number
      tan = tans[tan_number - 1]
      break if tan
      `notify-send -u critical -t 5000 'No TAN at index #{tan_number}'`
    end
    focus_window!
    perform_autotype([tan.strip])
  end

  def otp
    unless HAS_OTP
      $stderr.puts("Couldn't require rotp. Install it with `gem install rotp`")
      exit 1
    end
    unless attributes.otp_secret
      $stderr.puts([
        'No OTP secret found for this entry.',
        'Make sure your entry contains an attribute `otp_secret` like the following:',
        'otp_secret: your_otp_secret'
      ])
      exit 1
    end
    ROTP::TOTP.new(attributes.otp_secret).now
  end

  def autotype_values(index)
    password_key = CONFIG.password_key || 'pass'
    username_key = CONFIG.username_key || 'user'
    keys = case index
           when 0
             autotype_key = CONFIG.autotype_key || 'autotype'
             attributes[autotype_key] || CONFIG[autotype_key] || [username_key, ':tab', password_key]
           when 1 then attributes.autotype_1 || CONFIG.autotype_1 || [password_key]
           when 2 then attributes.autotype_2 || CONFIG.autotype_2 || [username_key]
           when 3 then attributes.autotype_3 || CONFIG.autotype_3 || %w(:otp)
           else attributes[:"autotype_#{index}"] || CONFIG[:"autotype_#{index}"] || []
           end
    keys = keys.split(/\s+/) if keys.is_a?(String)
    keys.map do |key|
      key[0] == ':' ? key : attributes[key]
    end.compact
  end

  def focus_window!
    `xdotool windowfocus --sync #{window_id}`
  end

  def window_id
    output = `xdotool search #{Shellwords.escape(window_regex)}`.chomp
    if output.lines.size == 1
      output.to_i
    else
      `notify-send 'Please select the target window'`
      xwininfo = `xwininfo -int`
      title = xwininfo.match(/Window id: \d+ "(?<title>.*)"$/)[:title]
      print "selected window: `#{title}` "
      IO.popen('xclip', 'w+') do |io|
        io.write(title)
        io.close_write
      end
      puts 'copied to clipboard'
      xwininfo[/(?<=Window id: )\d+/]
    end
  end

  def match(window_name)
    window_name.match(/#{attributes.window || name}/i)
  end

  def window_regex
    attributes.window || name
  end

  private

  def perform_autotype(values)
    values.each do |value|
      case value
      when ':tab' then `xdotool key Tab`
      when ':enter' then `xdotool key Return`
      else
        type = value == ':otp' ? otp : value
        IO.popen('xdotool type --clearmodifiers --file -', 'w+') do |io|
          io.write(type)
          io.close_write
        end
      end
    end
  end

  def ask_tan_number
    number = nil
    loop do
      IO.popen('rofi -dmenu -p "TAN number:"', 'w+') do |io|
        io.close_write
        number = io.gets
      end
      exit if number.nil?
      break if number.to_i.to_s == number.strip
      `notify-send -u critical -t 5000 'Please enter a number'`
    end
    number.to_i
  end
end

class PassBackend
  def initialize
    fail('cache_key option not defined') unless CONFIG.cache_key
    init_cache
    @needs_saving = false
    update_cache
    save_cache if needs_saving?
  end

  def entries
    @cache[:entries]
  end

  def sorted_entries(focused_window)
    Hash[
      entries.sort_by do |name, entry|
        match = entry.match(focused_window)
        match ? "\0" * focused_window.sub(match[0], '').size : name
      end
    ]
  end

  private

  def save_cache
    File.delete(CONFIG.cache_file) if File.exist?(CONFIG.cache_file)
    gpg_cmd = 'gpg -eq --batch -r '\
              "#{CONFIG.cache_key}"
    IO.popen(gpg_cmd, 'w+') do |io|
      io.puts(Marshal.dump(@cache))
      io.close_write
      File.open(CONFIG.cache_file, 'wb+', perm: 0600) do |f|
        f.write(io.read)
      end
    end
  end

  def entry_from(file)
    name = file.sub(/\.gpg$/, '')
    content = `pass show #{Shellwords.escape(name)}`
    pass = content.lines.first.chomp
    yaml = (content.lines[1..-1] || []).join
    begin
      metadata = expand_config(YAML.load(yaml) || {})
    rescue Psych::SyntaxError => e
      $stderr.puts "Failed parsing yaml of entry '#{name}':"
      $stderr.puts yaml
      $stderr.puts e.message
      metadata.error = true
      metadata.error_message = e.message
    end
    password_key = CONFIG.password_key || 'pass'
    begin
      metadata.merge!(password_key => pass)
    rescue NoMethodError => e
      metadata = OpenStruct.new(error: true)
      metadata.error_message = e.message
    end

    Entry.new(
      File.basename(name),
      metadata
    )
  end

  def files
    result = nil
    FileUtils.cd(CONFIG.password_store) do
      result = Dir['**/*.gpg']
    end
    result
  end

  def needs_saving?
    @needs_saving
  end

  def update_cache
    checksums.each do |file, checksum|
      next if @cache[:checksums][file] == checksum
      @cache[:entries][file.sub(/\.gpg$/, '')] = entry_from(file)
      @cache[:checksums][file] = checksum
      @needs_saving = true
    end
  end

  def checksums
    result = nil
    FileUtils.cd(CONFIG.password_store) do
      result = Hash[
        files.map { |file| [file, Digest::SHA512.file(file).hexdigest] }
      ]
    end
    result
  end

  def init_cache
    if File.exist?(CONFIG.cache_file)
      @cache = Marshal.load(`gpg -dq --batch #{CONFIG.cache_file}`)
    else
      @cache = { checksums: {}, entries: {} }
    end
  end
end

focused_window_id = `xdotool getwindowfocus`.chomp.to_i
focused_window_name = `xdotool getwindowname #{focused_window_id}`
pass_backend = PassBackend.new

choice = nil

sorted_entries = pass_backend.sorted_entries(focused_window_name)
errorneus_entry_indices = sorted_entries.each_with_index.reduce([]) do |result, ((_, entry), i)|
  entry.attributes.error == true ? result << i : result
end

rofi_args = %w(-dmenu -i -z -p Search:)
rofi_args.concat(['-kb-custom-7', CONFIG.key_bindings.autotype_tan])
rofi_args.concat(['-kb-custom-8', CONFIG.key_bindings.copy_password])
rofi_args.concat(['-kb-custom-9', CONFIG.key_bindings.copy_username])
rofi_args << '-mesg'
rofi_args << "Alt-{1-6}: Alternative autotypes\n"\
             "#{CONFIG.key_bindings.copy_username}: Copy username\n"\
             "#{CONFIG.key_bindings.copy_password}: Copy password\n"\
             "#{CONFIG.key_bindings.autotype_tan}: Autotype TAN"

unless errorneus_entry_indices.empty?
  rofi_args.concat(['-u', errorneus_entry_indices.join(',')])
end

IO.popen(['rofi', *rofi_args], 'w+') do |io|
  io.puts(*sorted_entries.keys)
  io.close_write
  choice = io.gets
  exit if choice.nil?
end

return_value = $?.exitstatus

@entry = pass_backend.entries[choice.chomp]
if @entry.attributes.error == true
  system('rofi', '-e', @entry.attributes.error_message)
  exit 1
end

def copy(attribute)
  clear_clip_pidfile = '/tmp/autopass-clear-clip.pid'
  value = @entry.attributes[attribute]

  if File.exist?(clear_clip_pidfile)
    Process.kill(:INT, File.read(clear_clip_pidfile).to_i)
  end
  IO.popen('xclip', 'w+') { |io| io.print(value) }
  `notify-send "Copied #{attribute} to clipboard. Clearing in 45 seconds"`
  fork do
    File.write(clear_clip_pidfile, Process.pid)
    sleep(45)
    IO.popen('xclip', 'w+') { |io| io.print('') }
    File.delete(clear_clip_pidfile)
  end
end

case return_value
when 0 then @entry.autotype!
when 10..15 then @entry.autotype!(return_value - 9)
when 16 then @entry.autotype_tan
when 17 then copy(CONFIG.password_key || 'pass')
when 18 then copy(CONFIG.username_key || 'user')
end
