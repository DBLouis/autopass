#!/usr/bin/env ruby

require 'fileutils'
require 'shellwords'
require 'digest/sha2'
require 'ostruct'
require 'optparse'
require 'autopass/config'
require 'autopass/entry'

config_dir = ENV['XDG_CONFIG_HOME'] || "#{ENV['HOME']}/.config"
config_file = File.join(config_dir, 'autopass', 'config.yml')
unless File.exist?(config_file)
  FileUtils.mkdir_p(File.dirname(config_file))
  File.write config_file, <<EOF
---
# you can insert any environment variable inside %{} for it to be replaced by
# the value of that variable. If it needs to be at the beginning of the string
# you have to escape it (e.g. `foo: %{BAR}` will raise an error, `foo: '%{BAR}'`
# will work though)

cache_file: '%{HOME}/.cache/autopass/autopass.cache'
# cache_key: YOUR_KEY_ID
# key_bindings:
#   autotype_tan: Alt+t
#   copy_username: Alt+u
#   copy_password: Alt+p
#   open_browser: Alt+o

# # clipboard command to use:
# # (default)
#   clip_command: 'xclip'
# # or
#   clip_command: 'xclip -selection clipboard'
# # Browsers window names to use for matching
# browsers:
#   - chrome
#   - chromium
EOF
  puts "Copied example config to #{config_file}"
  puts 'Please edit and set the gpg key to use for decrypting the cache'
  exit
end

begin
  CONFIG = Autopass::Config.load(config_file)
rescue RuntimeError => e
  abort("Failed to load config: #{e.message}")
end

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [OPTIONS]"
  opts.separator ""
  opts.separator 'Rofi frontend for pass and copy or autotype your passwords.'
  opts.separator ""
  opts.separator "OPTIONS:"

  opts.on('-c', '--clear-cache', "Remove cache file") do
    if CONFIG.cache_file.exist?
      CONFIG.cache_file.delete
      puts "rm #{CONFIG.cache_file}"
    end
    exit
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

unless CONFIG.password_store.exist?
  abort('It seems that you havent set up a password store yet. Do so by running `pass init <YOUR_KEY_ID>`')
end

def notify(message, type = :normal, milliseconds = 5000)
  system('notify-send', '-a', File.basename(__FILE__, '.rb').to_s, '-u', type.to_s, '-t', milliseconds.to_s, message.to_s)
end

class PassBackend
  def initialize
    init_cache
    @needs_saving = false
    update_cache
    save_cache if needs_saving?
  end

  def entries
    @cache[:entries]
  end

  def sorted_entries(focused_window)
    Hash[
      entries.sort_by do |name, entry|
        match = entry.match(focused_window)
        match ? "\0" * focused_window.sub(match[0], '').size : name
      end
    ]
  end

  private

  def save_cache
    CONFIG.cache_file.delete if CONFIG.cache_file.exist?
    gpg_cmd = 'gpg -eq --batch -r '\
              "#{CONFIG.cache_key}"
    FileUtils.mkdir_p(CONFIG.cache_file.dirname.to_s)
    IO.popen(gpg_cmd, 'w+') do |io|
      io.puts(Marshal.dump(@cache))
      io.close_write
      CONFIG.cache_file.open('wb+', perm: 0600) do |f|
        f.write(io.read)
      end
    end
  end

  def entry_from(file)
    name = file.sub(/\.gpg$/, '')
    Autopass::Entry.load(File.basename(name))
  end

  def files
    result = nil
    FileUtils.cd(CONFIG.password_store.to_s) do
      result = Dir['**/*.gpg']
    end
    result
  end

  def needs_saving?
    @needs_saving
  end

  def update_cache
    checksums.each do |file, checksum|
      next if @cache[:checksums][file] == checksum
      @cache[:entries][file.sub(/\.gpg$/, '')] = entry_from(file)
      @cache[:checksums][file] = checksum
      @needs_saving = true
    end
  end

  def checksums
    result = nil
    FileUtils.cd(CONFIG.password_store.to_s) do
      result = Hash[
        files.map { |file| [file, Digest::SHA512.file(file).hexdigest] }
      ]
    end
    result
  end

  def init_cache
    if CONFIG.cache_file.exist?
      @cache = Marshal.load(`gpg -dq --batch #{CONFIG.cache_file}`)
    else
      @cache = { checksums: {}, entries: {} }
    end
  end
end

focused_window_id = `xdotool getwindowfocus`.chomp.to_i
focused_window_name = `xdotool getwindowname #{focused_window_id}`
pass_backend = PassBackend.new

choice = nil

sorted_entries = pass_backend.sorted_entries(focused_window_name)
errorneus_entry_indices = sorted_entries.each_with_index.reduce([]) do |result, ((_, entry), i)|
  entry.attributes.error == true ? result << i : result
end

rofi_args = %W(-dmenu -i -z -p #{CONFIG.prompt})
rofi_args.concat(['-kb-custom-7', CONFIG.key_bindings.autotype_tan])
rofi_args.concat(['-kb-custom-8', CONFIG.key_bindings.copy_password])
rofi_args.concat(['-kb-custom-9', CONFIG.key_bindings.copy_username])
rofi_args.concat(['-kb-custom-10', CONFIG.key_bindings.open_browser])
rofi_args.concat(['-kb-custom-11', CONFIG.key_bindings.copy_otp])
rofi_args << '-mesg'

autotypes = {}

(1..5).map do |i|
  autotype = CONFIG.public_send(:"autotype_#{i}")
  autotypes[i] = autotype if autotype
end

msgs = [
  *autotypes.map { |i, autotype| "Alt-#{i}: Autotype #{autotype.join(' ')}" },
  "#{CONFIG.key_bindings.autotype_tan}: Autotype TAN",
  "#{CONFIG.key_bindings.copy_password}: Copy password",
  "#{CONFIG.key_bindings.copy_username}: Copy username",
  "#{CONFIG.key_bindings.copy_otp}: Copy OTP-Code",
  "#{CONFIG.key_bindings.open_browser}: Open URL in browser"
]
half = (msgs.length / 2.0).ceil
msgs = msgs.first(half).map.with_index do |msg, index|
  left = msg.to_s.ljust(40, ' ')
  right = msgs[half+index]
  [left, right].join
end
rofi_args << msgs.join("\n")


unless errorneus_entry_indices.empty?
  rofi_args.concat(['-u', errorneus_entry_indices.join(',')])
end

IO.popen(['rofi', *rofi_args], 'w+') do |io|
  io.puts(*sorted_entries.keys)
  io.close_write
  choice = io.gets
  exit if choice.nil?
end

return_value = $?.exitstatus

@entry = pass_backend.entries[choice.chomp]
if @entry.attributes.error == true
  system('rofi', '-e', @entry.attributes.error_message)
  exit 1
end

def copy(attribute, notification_seconds = 5)
  clear_clip_pidfile = '/tmp/autopass-clear-clip.pid'
  value = attribute == :otp ? @entry.otp : @entry.attributes[attribute]

  if File.exist?(clear_clip_pidfile)
    Process.kill(:INT, File.read(clear_clip_pidfile).to_i)
  end
  IO.popen(CONFIG.clip_command, 'w+') { |io| io.print(value) }
  notify("Copied #{attribute} to clipboard. Clearing in 45 seconds", :normal, notification_seconds*1000)
  fork do
    File.write(clear_clip_pidfile, Process.pid)
    sleep(45)
    IO.popen(CONFIG.clip_command, 'w+') { |io| io.print('') }
    File.delete(clear_clip_pidfile)
  end
end

case return_value
when 0 then @entry.autotype!
when 10..15 then @entry.autotype!(return_value - 9)
when 16 then @entry.autotype_tan
when 17 then copy(CONFIG.password_key)
when 18 then copy(CONFIG.username_key)
when 19 then @entry.open_url!
when 20 then copy(:otp, 10)
end
